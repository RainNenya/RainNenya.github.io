{"meta":{"title":"RainNenya","subtitle":"OUR OWN HEAVEN","description":"知识&技术&思考&成长","author":"Percy","url":"http://RainNenya.github.io"},"pages":[{"title":"404","date":"2019-07-19T08:41:10.000Z","updated":"2019-08-02T12:48:06.742Z","comments":true,"path":"404.html","permalink":"http://RainNenya.github.io/404.html","excerpt":"","text":""},{"title":"categories","date":"2019-08-01T14:25:58.000Z","updated":"2019-08-01T14:27:16.623Z","comments":true,"path":"categories/index.html","permalink":"http://RainNenya.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2019-02-15T05:49:30.000Z","updated":"2019-08-01T14:28:15.717Z","comments":true,"path":"about/index.html","permalink":"http://RainNenya.github.io/about/index.html","excerpt":"","text":""},{"title":"friends","date":"2019-08-01T14:17:27.000Z","updated":"2019-08-01T14:27:52.987Z","comments":true,"path":"friends/index.html","permalink":"http://RainNenya.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-01T14:14:36.000Z","updated":"2019-08-01T14:27:36.297Z","comments":true,"path":"tags/index.html","permalink":"http://RainNenya.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python3 基础语法(下)","slug":"Python3基础语法(下)","date":"2019-08-04T01:16:55.000Z","updated":"2019-08-04T03:13:16.288Z","comments":true,"path":"2019/08/04/python3-ji-chu-yu-fa-xia/","link":"","permalink":"http://RainNenya.github.io/2019/08/04/python3-ji-chu-yu-fa-xia/","excerpt":"","text":"输入输出input 输入 使用 input，执行程序后程序会等待用户输入 # input 输入的都是字符串 weight = input(\"please input your weight:\") weight please input your weight:62.5 ‘62.5’ # 利用float函数将字符串转化成浮点数 weight = float(input(\"please input your weight:\")) weight please input your weight:62.5 62.5 # 利用eval函数将输入的字符串作为表达式进行计算 age = eval(input(\"please input your age:\")) age please input your age:2018-1999 19 print 输出 print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=”” # 输出用print print('your weight is:',weight) your weight is: 62.5 导入模块 在 Python 用 import 或者 from...import 来导入相应的模块。 将整个模块导入 ### 以普通方式导入 import datetime datetime.datetime.today() datetime.datetime(2019, 8, 4, 8, 47, 32, 247842) 从某个模块中导入某个函数 ### 导入模块中某个对象 from datetime import datetime datetime.today() datetime.datetime(2019, 8, 4, 8, 48, 52, 171114) 将某个模块中的全部函数导入 ### 导入模块中全部对象 from datetime import * datetime.today() date(2018,1,1) datetime.date(2018, 1, 1) 将整个模块导入并为该模块起个别名 ### 以简写方式导入模块 import datetime as dt dt.datetime.today() datetime.datetime(2019, 8, 4, 8, 50, 59, 799972) 算术运算 运算符 描述 + 加 - 两个对象相加 - 减 - 得到负数或是一个数减去另一个数 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串 / 除 - x 除以 y % 取模 - 返回除法的余数 ** 幂 - 返回x的y次幂 // 取整除 - 向下取接近除数的整数 基本数学运算In [1]: 1+(100-20)/4+5*2 #四则运算 Out[1]: 31 In [2]: 2**10 #乘方运算 Out[2]: 1024 In [3]: 7%5 #求余运算 Out[3]: 2 In [4]: 7//5 #地板除法 Out[4]: 1 Math 模块中的函数In [5]: import math In [6]: math.sin(pi/2) #三角函数 Out[6]: 1.0 In [7]: abs(-1) #绝对值 Out[7]: 1 In [8]: math.log(e) #对数函数 Out[8]: 1.0 In [9]: math.factorial(5) #阶乘 Out[9]: 120 In [10]: (1 + 2j) + (3 - 1j) #复数 Out[10]: (4+1j) In [11]: complex(2,1)/(2 - 1j) Out[11]: (0.6+0.8j) In [12]: math.factorial(1000) Out[12]: 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","categories":[{"name":"后端","slug":"后端","permalink":"http://RainNenya.github.io/categories/后端/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://RainNenya.github.io/tags/Python/"}]},{"title":"Python3 基础语法（上）","slug":"Python3基础语法(上)","date":"2019-08-02T13:08:02.000Z","updated":"2019-08-04T02:25:14.970Z","comments":true,"path":"2019/08/02/python3-ji-chu-yu-fa-shang/","link":"","permalink":"http://RainNenya.github.io/2019/08/02/python3-ji-chu-yu-fa-shang/","excerpt":"","text":"标识符什么是标识符 标识符（identifier）是指用来标识某个实体的一个符号，在不同的应用环境下有不同的含义。在计算机编程语言中，标识符是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系。 标识符规则标识符由字母、数字、下划线组成。 所有标识符可以包括英文、数字以及下划线（_），但不能以数字开头。 标识符对大小写敏感。 In [1]: hello_110 = 0 In [2]: _110hello = 0 In [3]: 110_hello = 0 File \"&lt;ipython-input-7-98d382705aaa>\", line 1 110_hello = 0 ^ SyntaxError: invalid token 保留字什么是保留字 保留字(reserved word)，指在高级语言中已经定义过的字，使用者不能再将这些字作为变量名或过程名使用。 保留字就是关键字。 如何查看关键字 Python中有一个模块叫keyword，keyword中有两个成员：iskeyword 函数和 kwlist 列表（all = [“iskeyword”, “kwlist”]）。 其中kwlist中包含了所有的关键字，而iskeyword则用来查看某一个字符串是否是关键字。 In [1]: import keyword ...: keyword.kwlist Out[1]: ['False','None','True','and','as','assert','async','await','break','class','continue','def','del','elif','else','except','finally','for','from','global','if','import','in','is','lambda','nonlocal','not','or','pass','raise','return','try','while','with','yield'] In [2]: keyword.iskeyword(\"int\") Out[2]: False In [3]: keyword.iskeyword(\"is\") Out[3]: True 行与缩进 Python 最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 来控制类，函数以及其他逻辑判断。缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。 if True: print(\"true\") else: print(\"false\") #正常 if True: print(\"true\") print(\"1\") else: print(\"false\") print(\"2\") #IndentationError: unindent does not match any outer indentation level IndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。 if True: print(\"true\") print(\"1\") else: print(\"false\") print(\"2\") #IndentationError: unexpected indent IndentationError: unexpected indent错误, 则 Python 编译器是在告诉你你的文件里格式不对了，可能是tab和空格没对齐的问题，所有 Python 对格式要求非常严格。 多行语句Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句。 In [1]: number = 1 + \\ ...: 2 + \\ ...: 3 In [2]: number Out[2]: 6 语句中包含 [], {} 或 () 括号就不需要使用多行连接符。 In [1]: days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] In [2]: days Out[2]: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] 引号 Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。 In [1]: string1 = 'hello' In [2]: string2 = \"world\" In [3]: string3 = \"\"\"hello world\"\"\" In [4]: string4 = 'hello\" File \"&lt;ipython-input-50-490b69049501>\", line 1 string4 = 'hello\" ^ SyntaxError: EOL while scanning string literal 注释Python 中单行注释采用 # 开头。 #这是第一个注释 print(\"hello world\") #这是第二个注释 ''' 这是多行注释，使用单引号。 这是多行注释，使用单引号。 这是多行注释，使用单引号。 ''' \"\"\" 这是多行注释，使用双引号。 这是多行注释，使用双引号。 这是多行注释，使用双引号。 \"\"\"","categories":[{"name":"后端","slug":"后端","permalink":"http://RainNenya.github.io/categories/后端/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://RainNenya.github.io/tags/Python/"}]}]}