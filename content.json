{"meta":{"title":"RainNenya","subtitle":"OUR OWN HEAVEN","description":"知识&技术&思考&成长","author":"Percy","url":"http://RainNenya.github.io"},"pages":[{"title":"404","date":"2019-07-19T08:41:10.000Z","updated":"2019-08-02T12:48:06.742Z","comments":true,"path":"404.html","permalink":"http://RainNenya.github.io/404.html","excerpt":"","text":""},{"title":"about","date":"2019-02-15T05:49:30.000Z","updated":"2019-08-01T14:28:15.717Z","comments":true,"path":"about/index.html","permalink":"http://RainNenya.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-08-01T14:25:58.000Z","updated":"2019-08-01T14:27:16.623Z","comments":true,"path":"categories/index.html","permalink":"http://RainNenya.github.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2019-08-01T14:17:27.000Z","updated":"2019-08-01T14:27:52.987Z","comments":true,"path":"friends/index.html","permalink":"http://RainNenya.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-01T14:14:36.000Z","updated":"2019-08-01T14:27:36.297Z","comments":true,"path":"tags/index.html","permalink":"http://RainNenya.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python 面向过程","slug":"Python面向过程","date":"2019-08-17T11:56:31.000Z","updated":"2019-08-17T13:32:01.334Z","comments":true,"path":"2019/08/17/python-mian-xiang-guo-cheng/","link":"","permalink":"http://RainNenya.github.io/2019/08/17/python-mian-xiang-guo-cheng/","excerpt":"","text":"条件语句 ifif 语句 Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。 Python 中用 elif 代替了 else if，所以if语句的关键字为：if – elif – else。 注意： 1、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。 2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。 3、在Python中没有switch – case语句。 ### 1.if语句 a,b = 3,2 if a>b: x = a else: x = b x # 3 # if...elif...elif...else... y = a if a>b else b y # 3 逻辑运算符 操作符 描述 &lt; 小于 &lt;= 小于或等于 &gt; 大于 &gt;= 大于或等于 == 等于，比较两个值是否相等 != 不等于 ### 2.逻辑运算符 2 > 3 # True 1 + 2 &lt; 100 # True 3 == 4 - 1 # True 2 != 3 # True not 2 == 3 # True 关系运算符### 3.and和or 2 > 3 and 4 &lt; 5 # False 2 > 3 or 4 &lt; 5 # True x = [] or [1,2,3] or {} #短路计算,注意空字典和空列表为false x # [1, 2, 3] y = 50 and {1} and {3,4} y # {3, 4} bool('') # False bool([]) # False bool([1]) # True bool(0) # False bool(-1) # True 循环语句for 循环 Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。 # 1.for循环 l = [1,2,5,4,3] for i in l : print(i) # 12543 d = {'a':1,'b':2,'c':3} for k,v in d.items(): print(k,':',v) # a : 1 b : 2 c : 3 d.items() # dict_items([('a', 1), ('b', 2), ('c', 3)]) list(d.items()) # [('a', 1), ('b', 2), ('c', 3)] # 求l中最大的元素 l = [1,2,5,4,3] max(l) max_l = l[0] for i in l: max_l = i if i>max_l else max_l print(max_l) # 5 while 循环 使用 while 循环时，当条件满足，程序会一直执行，直到条件不满足。 # 2.while循环 # 求1+2+3+...+100 s,i = 0,1 while i&lt;=100: s = s + i i = i + 1 print(s,i) # 5050 101 continue &amp; break# 3.循环控制continue,break s = 'hello world' for i in s: print(i,end = '') # hello world print('\\n') # break跳出本层循环 for i in s: if i == ' ': break print(i,end = '') # hello print('\\n') # continue跳出本次循环 for i in s: if i == ' ': continue print(i,end = '') # helloworld 函数 函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。 函数能提高应用的模块性，和代码的重复利用率。 自定义函数的简单规则： 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。 任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。 函数内容以冒号起始，并且缩进。 return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。 普通参数 必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。 # 1.函数参数: 普通参数,可变参数,关键字参数 # 普通参数(位置参数) def my_abs(x): return(x if x>=0 else -x) my_abs(-5) # 5 my_abs(x = 5) # 5 默认参数 调用函数时，如果没有传递参数，则会使用默认参数。 # 默认参数 n(参数缺失时赋默认值) def my_power(x,n = 2): return(x**n) my_power(5) # 25 my_power(5,3) # 125 my_power(n = 3,x = 5) # 125 可变参数 你可能需要一个函数能处理比当初声明时更多的参数，这些参数叫做不定长参数。 # 可变参数 *args(可以传入不定长度参数序列,元组或列表) def my_sum(*args): s = 0 for i in args: s = s + i return(s) my_sum(1,2,3) # 6 my_sum() # 0 my_sum(*(1,2,3)) # 6 my_sum(*[1,2,3]) # 6 关键字参数 关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。 使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。 # 关键字参数 **kv(可以传入字典) def student(name,age,**kv): d = {'name':name,'age':age} d.update(kv) return(d) student('LiLei',19,grade = '13',gender = 'male') # {'name': 'LiLei', 'age': 19, 'grade': '13', 'gender': 'male'} Jim = {'name':'Jim','age':18,'grade':'13','hometown':'London'} student(**Jim) # {'name': 'Jim', 'age': 18, 'grade': '13', 'hometown': 'London'} 递归函数# 2.递归函数 # 递归函数调用自身 def fib(n): if n in [1,2]: return(1) else: return(fib(n-1) + fib(n-2)) fib(20) # 6765 装饰器# 3.装饰器 # 装饰器在不更改函数代码前提下赋予函数额外的功能 # 通常把函数非核心逻辑如插入日志、权限校验、性能测试放在装饰器中 import time def decorater(func): def wrapper(*args,**kv): tic = time.time() ans = func(*args,**kv) toc = time.time() print('{} is called. {}s used'. format(func.__name__,toc-tic)) return(ans) return(wrapper) @decorater def my_sum(*args): s = 0 for i in args: s = s + i return(s) # @decorater是一个语法糖 # 相当于 my_sum = decorater(my_sum) my_sum(1,2,3) # 相当于 decorater(my_sum)(1,2,3) my_sum(*range(100)) # my_sum is called. 7.867813110351562e-06s used # 4950 @decorater def fib(n): if n in [1,2]: return(1) else: return(fib(n-1) + fib(n-2)) # fib(4) # 6765 # fib is called. 1.6689300537109375e-06s used # fib is called. 1.430511474609375e-06s used # fib is called. 0.0001800060272216797s used # fib is called. 9.5367431640625e-07s used # fib is called. 0.0002582073211669922s used # 3 lambda 匿名函数所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。 lambda 只是一个表达式，函数体比 def 简单很多。 lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。 lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。 虽然lambda 函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。 lambda 函数的定义语法是: fun = lambda 参数序列: 返回值表达式 my_abs = lambda x : x if x >= 0 else -x my_abs(-5) # 5 my_power = lambda x,n=2 : x**n my_power(-5) # 25 (lambda x,n=2 : x**n)(-5,3) # -125 my_sum = lambda *args:sum(args) my_sum(1,2,3) # 6 # student = lambda name,age,**kv:{'name':name,'age':age}.update(kv) student = lambda name,age,**kv:dict(name = name,age = age,**kv) student('LiLei',18,grade = '13') # {'name': 'LiLei', 'age': 18, 'grade': '13'} d = {'name':'LiLei','age':18} d.update({'grade':'13'}) d # {'name': 'LiLei', 'age': 18, 'grade': '13'} type(d.update({'grade':'13'})) # NoneType fib = lambda n:1 if n in [1,2] else fib(n-1)+fib(n-2) fib(10) # 55 高阶函数 以函数为参数的函数叫做高阶函数。常用的内置高阶函数有: map、reduce、filter。高阶函数和匿名函数搭配使用堪称绝配。 map map()是 Python 内置的高阶函数，它接收一个函数 f和一个list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。 # 1.map将一个函数作用到一个序列或者多个序列配对 # map英文单词原意:映射 list(map(lambda x:x**2,[1,2,3,4])) # [1, 4, 9, 16] list(map(lambda x,y:x+y,'abc','123')) # ['a1', 'b2', 'c3'] reduce reduce()函数也是 Python 内置的一个高阶函数。reduce() 函数接收的参数和 map() 类似，一个函数 f，一个 list ，但行为和 map() 不同，reduce() 传入的函数 f 必须接收两个参数，reduce() 对 list 的每个元素反复调用函数f，并返回最终结果值。 ### 2.reduce将一个带有两个参数的函数依次迭代作用到一个序列 # reduce英文单词原意:减少 # reduce(f,[a,b,c,d]) = f(f(f(a,b),c),d) from functools import reduce reduce(lambda x,y:x+y,[1,2,3,4]) # 10 filter 3.filter() 函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个 list，这个函数 f 的作用是对每个元素进行判断，返回 True 或 False，filter() 根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新 list。 ### 3.filter根据规则过滤序列中的元素 # filter英文单词原意:过滤 list(filter(lambda x:x>0,[-1,-2,1,2])) # [1, 2] Python 推导式 Python 推导式可以生成列表、字典和集合。 Python 推导式虽然简单，但表达能力很强，可以实现map，filter 等功能，并且可以多重遍历。淋漓尽致地体现了Python语言的simple、readable、powerful的特点 列表推导式### 1.列表推导式 # 生成平方数序列 [x**2 for x in range(4)] # [0, 1, 4, 9] # 求序列的绝对值 l = [-1,-2,3,4,-2] [x if x>0 else -x for x in l] # [1, 2, 3, 4, 2] list(map(lambda x:x if x>0 else -x,l)) # [1, 2, 3, 4, 2] # 过滤序列中某些元素 [x for x in l if x>0] # [3, 4] list(filter(lambda x:x>0,l)) # [3, 4] # 多重遍历 girls = ['Mary','Lily'] boys = ['Jim','John'] couples = [(b,g) for b in boys for g in girls] couples # [('Jim', 'Mary'), ('Jim', 'Lily'), ('John', 'Mary'), ('John', 'Lily')] 字典推导式### 2.字典推导式 seasons = ['Spring','Summer','Autumn','Winter'] d = {k:v for k,v in enumerate(seasons,start = 1)} d # {1: 'Spring', 2: 'Summer', 3: 'Autumn', 4: 'Winter'} list(enumerate(seasons,start = 1)) # [(1, 'Spring'), (2, 'Summer'), (3, 'Autumn'), (4, 'Winter')] keys = ['a','b','c'] values = [1,2,3] D = {k:v for k,v in zip(keys,values)} D # {'a': 1, 'b': 2, 'c': 3} 集合推导式### 3.集合推导式 {abs(x) for x in[-1,-2,1,2,3]} # {1, 2, 3} # 求两个集合的交集 a = {1,2,5,4} b = {2,4,6,8} a.intersection(b) # {2, 4} {x for x in a if x in b} # {2, 4}","categories":[{"name":"后端","slug":"后端","permalink":"http://RainNenya.github.io/categories/后端/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://RainNenya.github.io/tags/Python/"}]},{"title":"Python3 基本数据类型","slug":"Python3基本数据类型","date":"2019-08-04T06:43:57.000Z","updated":"2019-08-04T07:35:35.515Z","comments":true,"path":"2019/08/04/python3-ji-ben-shu-ju-lei-xing/","link":"","permalink":"http://RainNenya.github.io/2019/08/04/python3-ji-ben-shu-ju-lei-xing/","excerpt":"","text":"数据类型概述标准数据类型Python3 中有六个标准的数据类型： Number（数字） String（字符串） List（列表） Tuple（元组） Set（集合） Dictionary（字典） 此外常用的还有numpy中的array，以及pandas中的dataframe和series。 可变与不可变数据类型Python3 的六个标准数据类型中： 不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）； 可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。 有序与无序数据结构 有序数据结构 list(列表)，是有序集合，没有固定大小，可以通过对偏移量以及其他方法修改列表大小。列表的基本形式如：[1,2,3,4] tuple(元组)，是有序集合，是不可变的，可以进行组合和复制运算后会产生一个新的元组。元组的基本形式如：(1,3,6,10) str(字符串)，也是有序集合，字符串的基本形式如：”hello” l = [1,2,3,4] print(l[0]) # 1 l[0] = 3 # [3,2,3,4] 无序数据结构 set(集合)，是一个无序不重复的集合。基本功能包括关系运算和消除重复元素。集合的基本形式如： {‘apple’,’orange’,’banana’} dict(字典)是无序的键值对(key:value)的集合。键必须是互不相同的（在同一个字典之内）。字典的基本形式如： {‘ICBC’:95588,’BOC’:955666} d = {'ICBC':95588,'BOC':955666} d['BOC'] # 955666 列表 列表是写在方括号 [] 之间、用逗号分隔开的元素列表。列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。 建立列表### 1.建立列表 fruits = ['apple','oragne','banana'] a = list(range(1,11,2)) # 等差数列 [1, 3, 5, 7, 9] b = [2**i for i in range(5)] # 等比数列 [1, 2, 4, 8, 16] c = [[i+j for i in range(3)] for j in range(2)] # 二维列表 [[0, 1, 2], [1, 2, 3]] 访问列表### 2.访问列表 # 列表支持下标访问和切片访问 print(a) #[1, 3, 5, 7, 9] a[0] # 1 a[-1] # 9 a[-2] # 7 a[0:3] # [1, 3, 5] a[0:3:2] # [1, 5] a[0:] # [1, 3, 5, 7, 9] a[:-2] # [1, 3, 5] 修改列表### 3.修改列表 a = list(range(1,11,2)) # [1, 3, 5, 7, 9] a[0] = 0 # [0, 3, 5, 7, 9] a.remove(0) # 删除元素 [3, 5, 7, 9] del(a[0]) # 根据下标删除元素 [5, 7, 9] a + [1,2,3] # + 对序列有拼接作用 #[5, 7, 9, 1, 2, 3] a * 3 # * 有复制拷贝多份的效果 # [5, 7, 9, 5, 7, 9, 5, 7, 9] 列表常用函数### 4.列表常用函数 len(a) max(a) min(a) sorted(a,reverse = True) 列表常用方法### 5.列表常用方法 a.extend([8,10]) # [5, 7, 9, 8, 10] a.append(11) # [5, 7, 9, 8, 10, 11] a.insert(0,1) # [1, 5, 7, 9, 8, 10, 11] 字典 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。 字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。 字典在插入元素和查找元素方面很多时候比列表更加高效 创建字典### 1.创建字典 d = {1:3,2:4,3:6} a = dict([('a',1),['b',2]]) b = dict(x = 1,y = 2) D = {i:i**2 for i in range(5)} D # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16} 字典常用操作### 2.字典常用操作 a['a'] = 3 # {'a': 3, 'b': 2} a['c'] = 5 # {'a': 3, 'b': 2, 'c': 5} a.keys() # dict_keys(['a', 'b', 'c']) a.values() # dict_values([3, 2, 5]) a.items() # dict_items([('a', 3), ('b', 2), ('c', 5)]) a # {'a': 3, 'b': 2, 'c': 5} a.update({'b':3,'d':10}) a # {'a': 3, 'b': 3, 'c': 5, 'd': 10} a.get('e',0) # 当不存在对应 Key时,使用默认值而不是报错 0 a.setdefault('a',4) # 3 {'a': 3, 'b': 3, 'c': 5, 'd': 10} a.setdefault('e',4) # 4 {'a': 3, 'b': 3, 'c': 5, 'd': 10, 'e': 4} 字符串 Python中的字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \\ 转义特殊字符。 创建字符串### 1.创建字符串 s1 = 'I\\'m Percy.\\nI just use Python to say :\"hello world\"!' # 单引号创建 print(s1) I&#39;m Percy. I just use Python to say :&quot;hello world&quot;! s2 = \"I'm Percy.\\nI just use Python to say:\\\"hello world\\\"!\" # 双引号创建 print(s2) I&#39;m Percy. I just use Python to say:&quot;hello world&quot;! s3 = '''I'm Percy. I just use Python to say:\"hello world\"!''' # 三重引号创建 print(s3) I&#39;m Percy. I just use Python to say:&quot;hello world&quot;! str(12345) # 将数字转为字符串 '12345' 字符串拼接### 2.字符串拼接(+ , join) s1 = \"I'm Percy.\" s2 = \"I love Python.\" s3 = 'I just use Python to say:\"hello world\"!' s = s1 + '\\n' + s2 + '\\n' + s3 print(s) I&#39;m Percy. I love Python. I just use Python to say:&quot;hello world&quot;! print('\\n'.join([s1,s2,s3])) #输出结果 I'm Percy. I love Python. I just use Python to say:\"hello world\"! \"abc\" * 5 # 'abcabcabcabcabc' 清洗字符串### 3.清洗字符串(replace,strip) \"$$$abcdef$$xyz\".replace('$','') # 'abcdefxyz' \"\\nabc123\\t\".strip() # 'abc123' \"Percy\\t18\\tmale\".split('\\t') # ['Percy', '18', 'male'] 格式化字符串### 4.格式化字符串(% 或 format) age = 19 weight = 60.5 hobby = 'travelling' # %d表示整数, %f表示浮点数, %s表示字符串 fs = \"I'm %d years old. My weight is %.2f kg. I like %s\" %(age,weight,hobby) print(fs) # I'm 19 years old. My weight is 60.50 kg. I like travelling fs = \"I'm {} years old. My weight is {:.2f} kg. I like {}\" .format(age,weight,hobby) print(fs) # I'm 19 years old. My weight is 60.50 kg. I like travelling 元组 元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。元组中的元素类型也可以不相同。 创建元组# 1.创建元组 t = (1,2,3) t0 = () # () t1 = (1) # 1 t2 = (1,) # (1,) x = 1,2 # (1, 2) y = tuple([1,2,3]) # (1, 2, 3) z = tuple('abc') # ('a', 'b', 'c') 使用元组# 2.使用元组 t.count(1) t.index(3) # 序列解包 a, b = 1, 2 t1, t2, t3 = [1, 2, 3] # 元组可以作为字典的 key # d = {[1,2]:4} # TypeError: unhashable type: 'list' d = {(1,2):4} # {(1, 2): 4} 浅拷贝与深拷贝# 3.浅拷贝与深拷贝 l = [1,2,3] l2 = l #浅拷贝,指向同一个内存空间(只是原来对象的一个别名) l2[0] = 0 # l2 [0, 2, 3] # l [0, 2, 3] l = [1,2,3] l3 = l.copy() #深拷贝,开辟新的内存空间 # [1, 2, 3] l3[0] = 0 # l3 [0, 2, 3] # l [1, 2, 3] 集合 集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。基本功能是进行成员关系测试和删除重复元素。 可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 创建集合# 1.创建集合 s = {1,2,3} s = {} type(s) # dict s = set() type(s) # set s3 = {x**2 for x in range(3)} # {0, 1, 4} 使用集合# 2.使用集合 # 去除重复对象,求交集、并集、补集等操作 a = [1,2,3,3,3,4,5,5,8,9] len(set(a)) # 7","categories":[{"name":"后端","slug":"后端","permalink":"http://RainNenya.github.io/categories/后端/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://RainNenya.github.io/tags/Python/"}]},{"title":"Python3 基础语法(下)","slug":"Python3基础语法(下)","date":"2019-08-04T01:16:55.000Z","updated":"2019-08-04T03:13:16.288Z","comments":true,"path":"2019/08/04/python3-ji-chu-yu-fa-xia/","link":"","permalink":"http://RainNenya.github.io/2019/08/04/python3-ji-chu-yu-fa-xia/","excerpt":"","text":"输入输出input 输入 使用 input，执行程序后程序会等待用户输入 # input 输入的都是字符串 weight = input(\"please input your weight:\") weight please input your weight:62.5 ‘62.5’ # 利用float函数将字符串转化成浮点数 weight = float(input(\"please input your weight:\")) weight please input your weight:62.5 62.5 # 利用eval函数将输入的字符串作为表达式进行计算 age = eval(input(\"please input your age:\")) age please input your age:2018-1999 19 print 输出 print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=”” # 输出用print print('your weight is:',weight) your weight is: 62.5 导入模块 在 Python 用 import 或者 from...import 来导入相应的模块。 将整个模块导入 ### 以普通方式导入 import datetime datetime.datetime.today() datetime.datetime(2019, 8, 4, 8, 47, 32, 247842) 从某个模块中导入某个函数 ### 导入模块中某个对象 from datetime import datetime datetime.today() datetime.datetime(2019, 8, 4, 8, 48, 52, 171114) 将某个模块中的全部函数导入 ### 导入模块中全部对象 from datetime import * datetime.today() date(2018,1,1) datetime.date(2018, 1, 1) 将整个模块导入并为该模块起个别名 ### 以简写方式导入模块 import datetime as dt dt.datetime.today() datetime.datetime(2019, 8, 4, 8, 50, 59, 799972) 算术运算 运算符 描述 + 加 - 两个对象相加 - 减 - 得到负数或是一个数减去另一个数 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串 / 除 - x 除以 y % 取模 - 返回除法的余数 ** 幂 - 返回x的y次幂 // 取整除 - 向下取接近除数的整数 基本数学运算In [1]: 1+(100-20)/4+5*2 #四则运算 Out[1]: 31 In [2]: 2**10 #乘方运算 Out[2]: 1024 In [3]: 7%5 #求余运算 Out[3]: 2 In [4]: 7//5 #地板除法 Out[4]: 1 Math 模块中的函数In [5]: import math In [6]: math.sin(pi/2) #三角函数 Out[6]: 1.0 In [7]: abs(-1) #绝对值 Out[7]: 1 In [8]: math.log(e) #对数函数 Out[8]: 1.0 In [9]: math.factorial(5) #阶乘 Out[9]: 120 In [10]: (1 + 2j) + (3 - 1j) #复数 Out[10]: (4+1j) In [11]: complex(2,1)/(2 - 1j) Out[11]: (0.6+0.8j) In [12]: math.factorial(1000) Out[12]: 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","categories":[{"name":"后端","slug":"后端","permalink":"http://RainNenya.github.io/categories/后端/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://RainNenya.github.io/tags/Python/"}]},{"title":"Python3 基础语法（上）","slug":"Python3基础语法(上)","date":"2019-08-02T13:08:02.000Z","updated":"2019-08-04T02:25:14.970Z","comments":true,"path":"2019/08/02/python3-ji-chu-yu-fa-shang/","link":"","permalink":"http://RainNenya.github.io/2019/08/02/python3-ji-chu-yu-fa-shang/","excerpt":"","text":"标识符什么是标识符 标识符（identifier）是指用来标识某个实体的一个符号，在不同的应用环境下有不同的含义。在计算机编程语言中，标识符是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系。 标识符规则标识符由字母、数字、下划线组成。 所有标识符可以包括英文、数字以及下划线（_），但不能以数字开头。 标识符对大小写敏感。 In [1]: hello_110 = 0 In [2]: _110hello = 0 In [3]: 110_hello = 0 File \"&lt;ipython-input-7-98d382705aaa>\", line 1 110_hello = 0 ^ SyntaxError: invalid token 保留字什么是保留字 保留字(reserved word)，指在高级语言中已经定义过的字，使用者不能再将这些字作为变量名或过程名使用。 保留字就是关键字。 如何查看关键字 Python中有一个模块叫keyword，keyword中有两个成员：iskeyword 函数和 kwlist 列表（all = [“iskeyword”, “kwlist”]）。 其中kwlist中包含了所有的关键字，而iskeyword则用来查看某一个字符串是否是关键字。 In [1]: import keyword ...: keyword.kwlist Out[1]: ['False','None','True','and','as','assert','async','await','break','class','continue','def','del','elif','else','except','finally','for','from','global','if','import','in','is','lambda','nonlocal','not','or','pass','raise','return','try','while','with','yield'] In [2]: keyword.iskeyword(\"int\") Out[2]: False In [3]: keyword.iskeyword(\"is\") Out[3]: True 行与缩进 Python 最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 来控制类，函数以及其他逻辑判断。缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。 if True: print(\"true\") else: print(\"false\") #正常 if True: print(\"true\") print(\"1\") else: print(\"false\") print(\"2\") #IndentationError: unindent does not match any outer indentation level IndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。 if True: print(\"true\") print(\"1\") else: print(\"false\") print(\"2\") #IndentationError: unexpected indent IndentationError: unexpected indent错误, 则 Python 编译器是在告诉你你的文件里格式不对了，可能是tab和空格没对齐的问题，所有 Python 对格式要求非常严格。 多行语句Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句。 In [1]: number = 1 + \\ ...: 2 + \\ ...: 3 In [2]: number Out[2]: 6 语句中包含 [], {} 或 () 括号就不需要使用多行连接符。 In [1]: days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] In [2]: days Out[2]: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] 引号 Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。 In [1]: string1 = 'hello' In [2]: string2 = \"world\" In [3]: string3 = \"\"\"hello world\"\"\" In [4]: string4 = 'hello\" File \"&lt;ipython-input-50-490b69049501>\", line 1 string4 = 'hello\" ^ SyntaxError: EOL while scanning string literal 注释Python 中单行注释采用 # 开头。 #这是第一个注释 print(\"hello world\") #这是第二个注释 ''' 这是多行注释，使用单引号。 这是多行注释，使用单引号。 这是多行注释，使用单引号。 ''' \"\"\" 这是多行注释，使用双引号。 这是多行注释，使用双引号。 这是多行注释，使用双引号。 \"\"\"","categories":[{"name":"后端","slug":"后端","permalink":"http://RainNenya.github.io/categories/后端/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://RainNenya.github.io/tags/Python/"}]}]}