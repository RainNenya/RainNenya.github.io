<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fiddler小技巧</title>
      <link href="/2019/09/24/fiddler-xiao-ji-qiao/"/>
      <url>/2019/09/24/fiddler-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="解压HTTP响应"><a href="#解压HTTP响应" class="headerlink" title="解压HTTP响应"></a>解压HTTP响应</h3><p>Fiddler抓包的过程中，我们经常看到HTTP响应是乱码，单击“Response body  is encoded. Click to decode.＂按钮可以解压HTTP响应。</p><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/解压HTTP响应.png" alt="解压HTTP响应"></p><h3 id="Fiddler可以获HTTPS的握手验证请求"><a href="#Fiddler可以获HTTPS的握手验证请求" class="headerlink" title="Fiddler可以获HTTPS的握手验证请求"></a>Fiddler可以获HTTPS的握手验证请求</h3><p>当浏览器访问HTTPS网页的时候，Fiddler能捕获到很多握手验证的请求“Tunnel to”。</p><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Tunnel to的请求.png" alt="Tunnel to的请求"></p><blockquote><p>HTTP Tunnel（也叫HTTP隧道、HTTP穿梭）它用HTTP协议在要通信的Client和Server建立起一条“Tunnel”,然后Client和Server之间的通信都是在这条Tunnel的基础之上实现的。</p></blockquote><p>简单来说，当Fiddler当作代理转发HTTPS请求的时候，就会产生CONNECT Tunnels ” 。这些握手验请求对我们没什么用处，可以选择在Fiddler中将其隐藏掉。</p><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/隐藏CONNECTs.png" alt="隐藏CONNECTs"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fiddler 面板功能详解</title>
      <link href="/2019/08/30/fiddler-mian-ban-gong-neng-xiang-jie/"/>
      <url>/2019/08/30/fiddler-mian-ban-gong-neng-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Any Browser.png" alt="任何浏览器"></p><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Any System.png" alt="任何系统"></p><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Any Platform.png" alt="任何平台"></p><h3 id="Fiddler简介"><a href="#Fiddler简介" class="headerlink" title="Fiddler简介"></a>Fiddler简介</h3><blockquote><p>Fiddler是位于客户端和服务器端的HTTP代理，也是目前最常用的http抓包工具之一,它能够记录客户端和服务器之间的所有 HTTP请求，是web调试的利器。既然是代理，也就是说：客户端的所有请求都要先经过Fiddler，然后转发到相应的服务器，反之，服务器端的所有响应，也都会先经过Fiddler然后发送到客户端。</p></blockquote><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Fiddler工作原理.png" alt="Fiddler工作原理"></p><h3 id="面版总览"><a href="#面版总览" class="headerlink" title="面版总览"></a>面版总览</h3><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Fiddler面板.png" alt="Fiddler面板"></p><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><blockquote><p>Fiddler菜单栏，包括捕获http请求，停止捕获请求，保存http请求，载入本地session、设置捕获规则等功能。</p></blockquote><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/HTTPS通信设置.png" alt="HTTPS通信设置"></p><h3 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h3><blockquote><p>Fiddler的工具栏，包括Fiddler针对当前view的操作（暂停，清除session,decode模式、清除缓存等）。</p></blockquote><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Fiddler工具条功能.png" alt="工具条功能"></p><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Fiddler工具栏说明.png" alt="工具栏说明"></p><h3 id="会话面板"><a href="#会话面板" class="headerlink" title="会话面板"></a>会话面板</h3><blockquote><p>Web Session面板，主要是Fiddler抓取到的每条http请求（每一条称为一个session）,主要包含了请求的url，协议，状态码，body等信息。</p></blockquote><h4 id="Web-Session列表栏"><a href="#Web-Session列表栏" class="headerlink" title="Web Session列表栏"></a>Web Session列表栏</h4><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Fiddler会话面板属性.png" alt="Web Session列表栏"></p><h4 id="会话图标v4-x"><a href="#会话图标v4-x" class="headerlink" title="会话图标v4.x"></a>会话图标v4.x</h4><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/会话面板图标说明4.png" alt="会话面板图标说明v4.x"></p><h4 id="会话图标v5-x"><a href="#会话图标v5-x" class="headerlink" title="会话图标v5.x"></a>会话图标v5.x</h4><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/会话面板图标说明5.png" alt="会话面板图标说明v5.x"></p><h3 id="监控面板"><a href="#监控面板" class="headerlink" title="监控面板"></a>监控面板</h3><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Fiddler监控面板使用.png" alt="监控面板的使用"></p><h4 id="Statistics"><a href="#Statistics" class="headerlink" title="Statistics"></a>Statistics</h4><blockquote><p>HTTP请求的性能和其他数据分析</p></blockquote><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Statistics面板.png" alt="Statistics面板"></p><p>我们可以从中看出一些基本性能数据：如DNS解析的时间消耗是8ms,建立TCP/IP连接的时间消耗是8ms等等信息。</p><h4 id="Inspector"><a href="#Inspector" class="headerlink" title="Inspector"></a>Inspector</h4><blockquote><p>提供headers、textview、hexview,Raw等多种方式查看单条http请求的请求报文的信息,分为上下两个部分，上半部分是请求头部分，下半部分是响应头部分。对于每一部分，提供了多种不同格式查看每个请求和响应的内容。</p></blockquote><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/inspector面板.png" alt="inspector面板"></p><p><strong>ImageView标签</strong> </p><p>JPG 格式使用 ImageView 就可以看到图片。选择一条Content-Type是image/jpeg的会话话,点击ImageView。</p><p><strong>TextView 标签</strong></p><p>HTML/JS/CSS 使用 TextView 可以看到响应的内容。选择一条Content-Type是text/html的回话,点击TextView。</p><p><strong>Raw标签</strong></p><p>Raw标签可以查看响应报文和响应正文,但是不包含请求报文。</p><p><strong>Auth标签</strong></p><p>Auth则可以查看授权Proxy-Authorization 和 Authorization的相关信息。</p><p><strong>Cookies标签</strong></p><p>Cookies标签可以看到请求的cookie和响应的set-cookie头信息。</p><h4 id="AutoResponder"><a href="#AutoResponder" class="headerlink" title="AutoResponder"></a>AutoResponder</h4><blockquote><p>Fiddler比较重要且比较强大的功能之一。可用于拦截某一请求，并重定向到本地的资源，或者使用Fiddler的内置响应。可用于调试服务器端代码而无需修改服务器端的代码和配置，因为拦截和重定向后，实际上访问的是本地的文件或者得到的是Fiddler的内置响应。</p></blockquote><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/AutoResponder标签.png" alt="AutoResponder标签"></p><h4 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h4><blockquote><p>可以模拟向相应的服务器发送数据的过程（不错，这就是灌水机器人的基本原理,也可以是部分http flood的一种方式）。</p></blockquote><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/composer面板.png" alt="composer面板"></p><h4 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h4><blockquote><p>Filter标签则可以设置Fiddler的过滤规则，来达到过滤http请求的目的。最简单如：过滤内网http请求而只抓取internet的http请求，或则过滤相应域名的http请求。Fiddler的过滤器非常强大，可以过滤特定http状态码的请求，可以过滤特定请求类型的http请求（如css请求，image请求，js请求等），可以过滤请求报文大于或则小于指定大小（byte）的请求。</p></blockquote><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Filters面板.png" alt="Filters面板"></p><h3 id="状态面板"><a href="#状态面板" class="headerlink" title="状态面板"></a>状态面板</h3><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Fiddler状态栏操作.png" alt="状态栏操作"></p><p><img src="https://raw.githubusercontent.com/RainNenya/PictureBed/master/img/Fiddler的内置命令.png" alt="Fiddler的内置命令"></p><p>参考文章1：<a href="https://blog.csdn.net/aaron_miller/article/details/88801786" target="_blank" rel="noopener">Fiddler - -面板和数据包图标详解</a></p><p>参考文章2：<a href="https://www.cnblogs.com/chengchengla1990/p/5681775.html" target="_blank" rel="noopener">Fiddler界面详情</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 面向对象</title>
      <link href="/2019/08/25/python3-mian-xiang-dui-xiang/"/>
      <url>/2019/08/25/python3-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="面向对象基本概念"><a href="#面向对象基本概念" class="headerlink" title="面向对象基本概念"></a>面向对象基本概念</h4><blockquote><p>Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以调用基类中的同名方法。</p></blockquote><h5 id="什么是面向对象编程"><a href="#什么是面向对象编程" class="headerlink" title="什么是面向对象编程"></a>什么是面向对象编程</h5><p>POP：Process Oriented Programming.程序被看成一系列命令的依次执行。基本封装形式为函数。设计函数的基本要点是IPO：输入Input -&gt; 处理Process -&gt; 输出Output。<br>OOP：Object Oriented Programming.程序被看成一系列对象的相互作用。基本的封装形式是类。设计类的基本要点是RPM：关系Relation，属性Property，方法Method。</p><h5 id="面向对象基本术语"><a href="#面向对象基本术语" class="headerlink" title="面向对象基本术语"></a>面向对象基本术语</h5><p>类：class，抽象数据结构，数据和算法的封装。如：定义一个类：dog。<br>对象：object，类的实例。如：dog类的一个实例：点点dot。<br>属性：properties，和对象关联的数据部分。如：weight体重，breed品种。<br>方法：methods，和对象关联的算法部分。如：run(),eat(),bark()。</p><h5 id="面向对象编程的优点"><a href="#面向对象编程的优点" class="headerlink" title="面向对象编程的优点"></a>面向对象编程的优点</h5><p>容易使用：封装，奇妙的句点符号。<br>容易扩展：继承，多态。</p><p>对象：object，类的实例。如：dog类的一个实例：点点dot。<br>属性：properties，和对象关联的数据部分。如：weight体重，breed品种。<br>方法：methods，和对象关联的算法部分。如：run(),eat(),bark()。</p><p>面向对象编程的优点<br>容易使用：封装，奇妙的句点符号。<br>容易扩展：继承，多态。</p><h4 id="创建类和对象"><a href="#创建类和对象" class="headerlink" title="创建类和对象"></a>创建类和对象</h4><p>类对象支持两种操作：属性引用和实例化。</p><p>属性引用使用和 Python 中所有的属性引用一样的标准语法：<strong>obj.name</strong>。</p><p>类对象创建后，类命名空间中所有的命名都是有效属性名。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 2.创建类和对象</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>weight<span class="token punctuation">,</span>breed<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>weight <span class="token operator">=</span> weight        self<span class="token punctuation">.</span>breed <span class="token operator">=</span> breed        <span class="token comment" spellcheck="true"># __age为私有属性 </span>        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s is running...'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Bowwow,Bowwow,Bowwow...'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>food<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s is eating %s...'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>food<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Zzz...Zzz...Zzz...'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># __think为私有方法</span>    <span class="token keyword">def</span> <span class="token function">__think</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I feel myself a hero and very handsome!'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># speak公有方法可以调用私有方法</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>words <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__think<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 实例化一个对象</span>snoopy <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'snoopy'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Husky'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用公有属性和公有方法</span>snoopy<span class="token punctuation">.</span>breed <span class="token comment" spellcheck="true"># 'Husky'</span><span class="token comment" spellcheck="true"># 私有属性和私有方法不能够直接在类外部进行访问</span><span class="token comment" spellcheck="true"># snoopy.__age # 'Dog' object has no attribute '__age'</span><span class="token comment" spellcheck="true"># snoopy.__think() # 'Dog' object has no attribute '__think'</span>snoopy<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># snoopy is running...</span>snoopy<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Bowwow,Bowwow,Bowwow...</span>snoopy<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token string">'meat'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># snoopy is eating meat...</span>snoopy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Zzz...Zzz...Zzz...</span>snoopy<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">'HaHaHa!!!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># I feel myself a hero and very handsome!</span><span class="token comment" spellcheck="true"># HaHaHa!!!</span></code></pre><h4 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 3.获取对象信息</span><span class="token comment" spellcheck="true"># Python中万物皆对象</span><span class="token comment" spellcheck="true"># type查看对象类别</span>type<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># int</span>type<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># bool</span>type<span class="token punctuation">(</span>snoopy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># __main__.Dog</span>type<span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># builtin_function_or_method</span>type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># list</span><span class="token comment" spellcheck="true"># isinstance 测试某个对象是否属于某个类</span>isinstance<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>set<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span>isinstance<span class="token punctuation">(</span>max<span class="token punctuation">,</span>object<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token comment" spellcheck="true"># Object is the most base type.</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>str<span class="token punctuation">,</span>float<span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span></code></pre><h3 id="封装和继承"><a href="#封装和继承" class="headerlink" title="封装和继承"></a>封装和继承</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><h5 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h5><p><strong>__private_attrs</strong>：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <strong>self.__private_attrs</strong>。</p><h5 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h5><p>在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 <strong>self</strong>，且为第一个参数，<strong>self</strong> 代表的是类的实例。</p><p><strong>self</strong> 的名字并不是规定死的，也可以使用 <strong>this</strong>，但是最好还是按照约定是用 <strong>self</strong>。</p><h5 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h5><p><strong>__private_method</strong>：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。<strong>self.__private_methods</strong>。</p><h5 id="类的专有方法："><a href="#类的专有方法：" class="headerlink" title="类的专有方法："></a>类的专有方法：</h5><ul><li><strong><strong>init</strong> :</strong> 构造函数，在生成对象时调用</li><li><strong><strong>del</strong> :</strong> 析构函数，释放对象时使用</li><li><strong><strong>repr</strong> :</strong> 打印，转换</li><li><strong><strong>setitem</strong> :</strong> 按照索引赋值</li><li><strong><strong>getitem</strong>:</strong> 按照索引获取值</li><li><strong><strong>len</strong>:</strong> 获得长度</li><li><strong><strong>cmp</strong>:</strong> 比较运算</li><li><strong><strong>call</strong>:</strong> 函数调用</li><li><strong><strong>add</strong>:</strong> 加运算</li><li><strong><strong>sub</strong>:</strong> 减运算</li><li><strong><strong>mul</strong>:</strong> 乘运算</li><li><strong><strong>truediv</strong>:</strong> 除运算</li><li><strong><strong>mod</strong>:</strong> 求余运算</li><li><strong><strong>pow</strong>:</strong> 乘方</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 类属性</span>    home <span class="token operator">=</span> <span class="token string">'earth'</span>    <span class="token comment" spellcheck="true"># 类方法</span>    <span class="token keyword">def</span> <span class="token function">dream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No deal, no hurt!'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定制方法</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token string">'An animal name %s'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>weight<span class="token punctuation">,</span>breed<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>weight <span class="token operator">=</span> weight        self<span class="token punctuation">.</span>breed <span class="token operator">=</span> breed        <span class="token comment" spellcheck="true"># __age为私有属性 </span>        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s is running...'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>food<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s is eating %s...'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>food<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Zzz...Zzz...Zzz...'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># __think为私有方法</span>    <span class="token keyword">def</span> <span class="token function">__think</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I feel myself a hero and very handsome!'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># speak公有方法可以调用私有方法</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>words <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__think<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 类属性</span>snoopy <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token string">'snoopy'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Husky'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>snoopy<span class="token punctuation">.</span>home <span class="token comment" spellcheck="true"># 'earth'</span>Animal<span class="token punctuation">.</span>home <span class="token comment" spellcheck="true"># 'earth'</span></code></pre><pre class=" language-python"><code class="language-python">Animal<span class="token punctuation">.</span>home <span class="token operator">=</span> <span class="token string">'Jupiter'</span>snoopy<span class="token punctuation">.</span>home <span class="token comment" spellcheck="true"># 'Jupiter'</span></code></pre><pre class=" language-python"><code class="language-python">snoopy<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">5</span>snoopy<span class="token punctuation">.</span>age <span class="token comment" spellcheck="true"># 5</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 通过对象能够访问,但不能够修改类属性</span>snoopy<span class="token punctuation">.</span>home <span class="token operator">=</span> <span class="token string">'moon'</span>Animal<span class="token punctuation">.</span>home <span class="token comment" spellcheck="true"># 'Jupiter'</span><span class="token comment" spellcheck="true"># del snoopy.home</span><span class="token comment" spellcheck="true"># snoopy.home # 'Jupiter'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 类方法只能通过类名访问,不能通过对象访问</span>Animal<span class="token punctuation">.</span>dream<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># No deal, no hurt!</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 通过类名也可以访问对象方法</span>Animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span>snoopy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># snoopy is running...</span>snoopy<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># snoopy is running...</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定制的方法有特殊的功能</span>str<span class="token punctuation">(</span>snoopy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 'An animal name snoopy'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 奇妙的句点符号</span>s <span class="token operator">=</span> <span class="token string">'abc#123@def'</span><span class="token comment" spellcheck="true"># 面向过程必须记住非常多函数名:replace,upper,find</span><span class="token comment" spellcheck="true"># 面向对象只需要输入奇妙的句点符号后按下tab键</span>s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> # <span class="token string">'abc123def'</span></code></pre><pre class=" language-python"><code class="language-python">s<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 11</span><span class="token comment" spellcheck="true"># dir(s)查看全部可用的属性和方法</span></code></pre><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><blockquote><p>Python 同样支持类的继承，如果一种语言不支持继承，类就没有什么意义。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 2.继承</span><span class="token comment" spellcheck="true"># 子类可以通过继承获得父类的属性和方法</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">,</span>Pet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'喵喵喵...'</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><pre class=" language-python"><code class="language-python">kitty <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">'kitty'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Bose'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>kitty<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># kitty is running...</span>kitty<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">'喵喵喵'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># I feel myself a hero and very handsome!</span><span class="token comment" spellcheck="true"># 喵喵喵</span>kitty<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 喵喵喵...</span></code></pre><h3 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h3><p>一个 .py 文件就是一个模块。<br>一个包含有 <strong>init</strong>.py 文件的文件夹就是一个包。</p><h4 id="模块示范"><a href="#模块示范" class="headerlink" title="模块示范"></a>模块示范</h4><blockquote><p>模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py。模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>writefile mymodule<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true">#!/user/bin/env python3</span><span class="token comment" spellcheck="true">#-*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 1.模块示范</span><span class="token string">'a test module'</span> <span class="token comment" spellcheck="true"># 模块注释</span>__author__ <span class="token operator">=</span> <span class="token string">'Python_Ai_Road'</span> <span class="token comment" spellcheck="true"># 作者信息</span>__version__ <span class="token operator">=</span> <span class="token string">'v1.0'</span> <span class="token comment" spellcheck="true"># 版本信息</span><span class="token keyword">def</span> <span class="token function">_Email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 模块私有函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'NetEasy@163.com'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__WeChat_Official_Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 模块私有函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python与算法之美'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>person <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 公有函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 测试代码</span>    hello<span class="token punctuation">(</span><span class="token punctuation">)</span>    hello<span class="token punctuation">(</span><span class="token string">'China'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Contact to me:'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    _Email<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Learn more with me:'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    __WeChat_Official_Account<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当直接运行该模块时,执行测试代码,而引入模块时不执行测试代码</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Writing mymodule.py</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mymodulehelp<span class="token punctuation">(</span>mymodule<span class="token punctuation">)</span>mymodule<span class="token punctuation">.</span>__author__ <span class="token comment" spellcheck="true"># 'Python_Ai_Road'</span>mymodule<span class="token punctuation">.</span>__doc__ <span class="token comment" spellcheck="true"># 'a test module'</span></code></pre><pre><code>Help on module mymodule:NAME    mymodule - a test moduleFUNCTIONS    hello(person=&#39;world&#39;)    test()VERSION    v1.0AUTHOR    Python_Ai_RoadFILE    /home/jquser/mymodule.py</code></pre><pre class=" language-python"><code class="language-python">!python mymodule<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true"># hello world</span><span class="token comment" spellcheck="true"># hello China</span><span class="token comment" spellcheck="true"># Contact to me:NetEasy@163.com</span><span class="token comment" spellcheck="true"># Learn more with me:Python与算法之美</span></code></pre><pre><code>hello worldhello ChinaContact to me:    NetEasy@163.comLearn more with me:    Python与算法之美</code></pre><h4 id="包示范"><a href="#包示范" class="headerlink" title="包示范"></a>包示范</h4><blockquote><p>包是一种管理 Python 模块命名空间的形式，采用”点模块名称”。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2.包示范</span>!mkdir Animal</code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>writefile Animal<span class="token operator">/</span>__init__<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true">#!/user/bin/env python3</span><span class="token comment" spellcheck="true">#-*- coding:utf-8 -*-</span><span class="token string">'Animal module for fun!'</span> <span class="token comment" spellcheck="true"># 模块注释</span>__author__ <span class="token operator">=</span> <span class="token string">'Python_Ai_Road'</span> <span class="token comment" spellcheck="true"># 作者信息</span><span class="token comment" spellcheck="true"># Writing Animal/__init__.py</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>writefile Animal<span class="token operator">/</span>Animal<span class="token punctuation">.</span>py<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token comment" spellcheck="true"># Writing Animal/Animal.py</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>writefile Animal<span class="token operator">/</span>Dog<span class="token punctuation">.</span>py<span class="token keyword">from</span> Animal<span class="token punctuation">.</span>Animal <span class="token keyword">import</span> Animal<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'bowwow...bowwow...bowwow...'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Writing Animal/Dog.py</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>writefile Animal<span class="token operator">/</span>Cat<span class="token punctuation">.</span>py<span class="token keyword">from</span> Animal<span class="token punctuation">.</span>Animal <span class="token keyword">import</span> Animal<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'miaow...miaow...miaow...'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Writing Animal/Cat.py</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> Animalhelp<span class="token punctuation">(</span>Animal<span class="token punctuation">)</span></code></pre><pre><code>Help on package Animal:NAME    Animal - Animal module for fun!PACKAGE CONTENTS    Animal    Cat    DogAUTHOR    Python_Ai_RoadFILE    /home/jquser/Animal/__init__.py</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Animal<span class="token punctuation">.</span>Dog <span class="token keyword">import</span> Dogsnoopy <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'snoopy'</span><span class="token punctuation">)</span>snoopy<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># bowwow...bowwow...bowwow...</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Animal<span class="token punctuation">.</span>Cat <span class="token keyword">import</span> Catkitty <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">'kitty'</span><span class="token punctuation">)</span>kitty<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># miaow...miaow...miaow...</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 面向过程</title>
      <link href="/2019/08/17/python3-mian-xiang-guo-cheng/"/>
      <url>/2019/08/17/python3-mian-xiang-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="条件语句-if"><a href="#条件语句-if" class="headerlink" title="条件语句 if"></a>条件语句 if</h3><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><blockquote><p>Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。</p></blockquote><p>Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>。</p><p><strong>注意：</strong></p><ul><li>1、每个条件后面要使用冒号 <strong>:</strong>，表示接下来是满足条件后要执行的语句块。</li><li>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</li><li>3、在Python中没有switch – case语句。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 1.if语句</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token keyword">if</span> a<span class="token operator">></span>b<span class="token punctuation">:</span>    x <span class="token operator">=</span> a<span class="token keyword">else</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> bx <span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># if...elif...elif...else...</span>y <span class="token operator">=</span> a <span class="token keyword">if</span> a<span class="token operator">></span>b <span class="token keyword">else</span> by <span class="token comment" spellcheck="true"># 3</span></code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;</code></td><td style="text-align:left">小于</td></tr><tr><td style="text-align:left"><code>&lt;=</code></td><td style="text-align:left">小于或等于</td></tr><tr><td style="text-align:left"><code>&gt;</code></td><td style="text-align:left">大于</td></tr><tr><td style="text-align:left"><code>&gt;=</code></td><td style="text-align:left">大于或等于</td></tr><tr><td style="text-align:left"><code>==</code></td><td style="text-align:left">等于，比较两个值是否相等</td></tr><tr><td style="text-align:left"><code>!=</code></td><td style="text-align:left">不等于</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 2.逻辑运算符</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># True</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token comment" spellcheck="true"># True</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># True</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># True</span><span class="token operator">not</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># True</span></code></pre><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 3.and和or</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># False</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">or</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># True</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">or</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#短路计算,注意空字典和空列表为false</span>x <span class="token comment" spellcheck="true"># [1, 2, 3]</span>y <span class="token operator">=</span> <span class="token number">50</span> <span class="token operator">and</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token operator">and</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>y <span class="token comment" spellcheck="true"># {3, 4}</span></code></pre><pre class=" language-python"><code class="language-python">bool<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span>bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span>bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span>bool<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span>bool<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span></code></pre><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><blockquote><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.for循环</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> l <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 12543</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># a : 1   b : 2   c : 3</span></code></pre><pre class=" language-python"><code class="language-python">d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict_items([('a', 1), ('b', 2), ('c', 3)])</span>list<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [('a', 1), ('b', 2), ('c', 3)]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 求l中最大的元素</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>max<span class="token punctuation">(</span>l<span class="token punctuation">)</span>max_l <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>    max_l <span class="token operator">=</span> i <span class="token keyword">if</span> i<span class="token operator">></span>max_l <span class="token keyword">else</span> max_l<span class="token keyword">print</span><span class="token punctuation">(</span>max_l<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span></code></pre><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><blockquote><p>使用 while 循环时，当条件满足，程序会一直执行，直到条件不满足。 </p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2.while循环</span><span class="token comment" spellcheck="true"># 求1+2+3+...+100</span>s<span class="token punctuation">,</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">while</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> i    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5050 101</span></code></pre><h4 id="continue-amp-break"><a href="#continue-amp-break" class="headerlink" title="continue &amp; break"></a>continue &amp; break</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 3.循环控制continue,break</span>s <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hello world</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># break跳出本层循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hello</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># continue跳出本次循环</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># helloworld</span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><p>函数能提高应用的模块性，和代码的重复利用率。</p></blockquote><p>自定义函数的简单规则：</p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul><h4 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h4><blockquote><p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.函数参数: 普通参数,可变参数,关键字参数</span><span class="token comment" spellcheck="true"># 普通参数(位置参数)</span><span class="token keyword">def</span> <span class="token function">my_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>x <span class="token keyword">if</span> x<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>x<span class="token punctuation">)</span>my_abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span>my_abs<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span></code></pre><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><blockquote><p>调用函数时，如果没有传递参数，则会使用默认参数。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 默认参数 n(参数缺失时赋默认值)</span><span class="token keyword">def</span> <span class="token function">my_power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>x<span class="token operator">**</span>n<span class="token punctuation">)</span>my_power<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 25</span>my_power<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 125</span>my_power<span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 125</span></code></pre><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><blockquote><p>你可能需要一个函数能处理比当初声明时更多的参数，这些参数叫做不定长参数。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可变参数 *args(可以传入不定长度参数序列,元组或列表)</span><span class="token keyword">def</span> <span class="token function">my_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>        s <span class="token operator">=</span> s <span class="token operator">+</span> i    <span class="token keyword">return</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>my_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>my_sum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>my_sum<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>my_sum<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span></code></pre><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><blockquote><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 关键字参数 **kv(可以传入字典)</span><span class="token keyword">def</span> <span class="token function">student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token operator">**</span>kv<span class="token punctuation">)</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span>name<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span>age<span class="token punctuation">}</span>    d<span class="token punctuation">.</span>update<span class="token punctuation">(</span>kv<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>student<span class="token punctuation">(</span><span class="token string">'LiLei'</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span>grade <span class="token operator">=</span> <span class="token string">'13'</span><span class="token punctuation">,</span>gender <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'name': 'LiLei', 'age': 19, 'grade': '13', 'gender': 'male'}</span>Jim <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Jim'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'grade'</span><span class="token punctuation">:</span><span class="token string">'13'</span><span class="token punctuation">,</span><span class="token string">'hometown'</span><span class="token punctuation">:</span><span class="token string">'London'</span><span class="token punctuation">}</span>student<span class="token punctuation">(</span><span class="token operator">**</span>Jim<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'name': 'Jim', 'age': 18, 'grade': '13', 'hometown': 'London'}</span></code></pre><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2.递归函数</span><span class="token comment" spellcheck="true"># 递归函数调用自身</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fib<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6765</span></code></pre><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 3.装饰器</span><span class="token comment" spellcheck="true"># 装饰器在不更改函数代码前提下赋予函数额外的功能</span><span class="token comment" spellcheck="true"># 通常把函数非核心逻辑如插入日志、权限校验、性能测试放在装饰器中</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorater</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kv<span class="token punctuation">)</span><span class="token punctuation">:</span>        tic <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kv<span class="token punctuation">)</span>        toc <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} is called. {}s used'</span><span class="token punctuation">.</span>             format<span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span>toc<span class="token operator">-</span>tic<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">@decorater<span class="token keyword">def</span> <span class="token function">my_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>        s <span class="token operator">=</span> s <span class="token operator">+</span> i    <span class="token keyword">return</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># @decorater是一个语法糖</span><span class="token comment" spellcheck="true"># 相当于 my_sum = decorater(my_sum)</span>my_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 相当于 decorater(my_sum)(1,2,3)</span></code></pre><pre class=" language-python"><code class="language-python">my_sum<span class="token punctuation">(</span><span class="token operator">*</span>range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_sum is called. 7.867813110351562e-06s used</span><span class="token comment" spellcheck="true"># 4950</span></code></pre><pre class=" language-python"><code class="language-python">@decorater<span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># fib(4) # 6765</span><span class="token comment" spellcheck="true"># fib is called. 1.6689300537109375e-06s used</span><span class="token comment" spellcheck="true"># fib is called. 1.430511474609375e-06s used</span><span class="token comment" spellcheck="true"># fib is called. 0.0001800060272216797s used</span><span class="token comment" spellcheck="true"># fib is called. 9.5367431640625e-07s used</span><span class="token comment" spellcheck="true"># fib is called. 0.0002582073211669922s used</span><span class="token comment" spellcheck="true"># 3</span></code></pre><h3 id="lambda-匿名函数"><a href="#lambda-匿名函数" class="headerlink" title="lambda 匿名函数"></a>lambda 匿名函数</h3><p>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</p><ul><li>lambda 只是一个表达式，函数体比 def 简单很多。</li><li>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。</li><li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</li><li><p>虽然lambda 函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</p></li><li><p>lambda 函数的定义语法是:</p><p>fun = lambda 参数序列: 返回值表达式</p></li></ul><pre class=" language-python"><code class="language-python">my_abs <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>xmy_abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span></code></pre><pre class=" language-python"><code class="language-python">my_power <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">:</span> x<span class="token operator">**</span>nmy_power<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 25</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">:</span> x<span class="token operator">**</span>n<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -125</span></code></pre><pre class=" language-python"><code class="language-python">my_sum <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">:</span>sum<span class="token punctuation">(</span>args<span class="token punctuation">)</span>my_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># student = lambda name,age,**kv:{'name':name,'age':age}.update(kv)</span>student <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token operator">**</span>kv<span class="token punctuation">:</span>dict<span class="token punctuation">(</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span>age <span class="token operator">=</span> age<span class="token punctuation">,</span><span class="token operator">**</span>kv<span class="token punctuation">)</span>student<span class="token punctuation">(</span><span class="token string">'LiLei'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>grade <span class="token operator">=</span> <span class="token string">'13'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'name': 'LiLei', 'age': 18, 'grade': '13'}</span></code></pre><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'LiLei'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span>d<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'grade'</span><span class="token punctuation">:</span><span class="token string">'13'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>d <span class="token comment" spellcheck="true"># {'name': 'LiLei', 'age': 18, 'grade': '13'}</span></code></pre><pre class=" language-python"><code class="language-python">type<span class="token punctuation">(</span>d<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'grade'</span><span class="token punctuation">:</span><span class="token string">'13'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># NoneType</span></code></pre><pre class=" language-python"><code class="language-python">fib <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">:</span><span class="token number">1</span> <span class="token keyword">if</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">else</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span>fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span>fib<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 55</span></code></pre><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><blockquote><p>以函数为参数的函数叫做高阶函数。常用的内置高阶函数有: map、reduce、filter。高阶函数和匿名函数搭配使用堪称绝配。</p></blockquote><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote><p><strong>map()</strong>是 Python 内置的高阶函数，它接收一个<strong>函数 f</strong>和一个<strong>list</strong>，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.map将一个函数作用到一个序列或者多个序列配对</span><span class="token comment" spellcheck="true"># map英文单词原意:映射</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 4, 9, 16]</span></code></pre><pre class=" language-python"><code class="language-python">list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">,</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['a1', 'b2', 'c3']</span></code></pre><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><blockquote><p><strong>reduce()</strong>函数也是 Python 内置的一个高阶函数。reduce() 函数接收的参数和 map() 类似，<strong>一个函数 f，一个 list </strong>，但行为和 map() 不同，reduce() 传入的函数 f 必须接收两个参数，reduce() 对 list 的每个元素反复调用函数f，并返回最终结果值。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 2.reduce将一个带有两个参数的函数依次迭代作用到一个序列</span><span class="token comment" spellcheck="true"># reduce英文单词原意:减少</span><span class="token comment" spellcheck="true"># reduce(f,[a,b,c,d]) = f(f(f(a,b),c),d)</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> reducereduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10</span></code></pre><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><blockquote><p>3.<strong>filter() </strong>函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个<strong>函数 f</strong> 和一个 <strong>list</strong>，这个函数 f 的作用是对每个元素进行判断，返回 True 或 False，<strong>filter() 根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新 list。</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 3.filter根据规则过滤序列中的元素</span><span class="token comment" spellcheck="true"># filter英文单词原意:过滤</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2]</span></code></pre><h3 id="Python-推导式"><a href="#Python-推导式" class="headerlink" title="Python 推导式"></a>Python 推导式</h3><blockquote><p>Python 推导式可以生成列表、字典和集合。</p><p>Python 推导式虽然简单，但表达能力很强，可以实现map，filter 等功能，并且可以多重遍历。淋漓尽致地体现了Python语言的simple、readable、powerful的特点</p></blockquote><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 1.列表推导式</span><span class="token comment" spellcheck="true"># 生成平方数序列</span><span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># [0, 1, 4, 9]</span><span class="token comment" spellcheck="true"># 求序列的绝对值</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token keyword">if</span> x<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> l<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 2]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x <span class="token keyword">if</span> x<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>x<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 2]</span><span class="token comment" spellcheck="true"># 过滤序列中某些元素</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> l <span class="token keyword">if</span> x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># [3, 4]</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [3, 4]</span><span class="token comment" spellcheck="true"># 多重遍历</span>girls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Mary'</span><span class="token punctuation">,</span><span class="token string">'Lily'</span><span class="token punctuation">]</span>boys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Jim'</span><span class="token punctuation">,</span><span class="token string">'John'</span><span class="token punctuation">]</span>couples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>g<span class="token punctuation">)</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> boys <span class="token keyword">for</span> g <span class="token keyword">in</span> girls<span class="token punctuation">]</span>couples <span class="token comment" spellcheck="true"># [('Jim', 'Mary'), ('Jim', 'Lily'), ('John', 'Mary'), ('John', 'Lily')]</span></code></pre><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 2.字典推导式</span>seasons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Spring'</span><span class="token punctuation">,</span><span class="token string">'Summer'</span><span class="token punctuation">,</span><span class="token string">'Autumn'</span><span class="token punctuation">,</span><span class="token string">'Winter'</span><span class="token punctuation">]</span>d <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span>v <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>seasons<span class="token punctuation">,</span>start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>d <span class="token comment" spellcheck="true"># {1: 'Spring', 2: 'Summer', 3: 'Autumn', 4: 'Winter'}</span></code></pre><pre class=" language-python"><code class="language-python">list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>seasons<span class="token punctuation">,</span>start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [(1, 'Spring'), (2, 'Summer'), (3, 'Autumn'), (4, 'Winter')]</span></code></pre><pre class=" language-python"><code class="language-python">keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>D <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span>v <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> zip<span class="token punctuation">(</span>keys<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">}</span>D <span class="token comment" spellcheck="true"># {'a': 1, 'b': 2, 'c': 3}</span></code></pre><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 3.集合推导式</span><span class="token punctuation">{</span>abs<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># {1, 2, 3}</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 求两个集合的交集</span>a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {2, 4}</span><span class="token punctuation">{</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> a <span class="token keyword">if</span> x <span class="token keyword">in</span> b<span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># {2, 4}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基本数据类型</title>
      <link href="/2019/08/04/python3-ji-ben-shu-ju-lei-xing/"/>
      <url>/2019/08/04/python3-ji-ben-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="数据类型概述"><a href="#数据类型概述" class="headerlink" title="数据类型概述"></a>数据类型概述</h3><h4 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h4><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>此外常用的还有numpy中的array，以及pandas中的dataframe和series。</p><h4 id="可变与不可变数据类型"><a href="#可变与不可变数据类型" class="headerlink" title="可变与不可变数据类型"></a>可变与不可变数据类型</h4><p>Python3 的六个标准数据类型中：</p><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul><h4 id="有序与无序数据结构"><a href="#有序与无序数据结构" class="headerlink" title="有序与无序数据结构"></a>有序与无序数据结构</h4><ul><li><strong>有序数据结构</strong></li></ul><p>list(列表)，是有序集合，没有固定大小，可以通过对偏移量以及其他方法修改列表大小。列表的基本形式如：[1,2,3,4]</p><p>tuple(元组)，是有序集合，是不可变的，可以进行组合和复制运算后会产生一个新的元组。元组的基本形式如：(1,3,6,10)</p><p>str(字符串)，也是有序集合，字符串的基本形式如：”hello”</p><pre class=" language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># [3,2,3,4]</span></code></pre><ul><li><strong>无序数据结构</strong></li></ul><p>set(集合)，是一个无序不重复的集合。基本功能包括关系运算和消除重复元素。集合的基本形式如：</p><p>{‘apple’,’orange’,’banana’}</p><p>dict(字典)是无序的键值对(key:value)的集合。键必须是互不相同的（在同一个字典之内）。字典的基本形式如：</p><p>{‘ICBC’:95588,’BOC’:955666}</p><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'ICBC'</span><span class="token punctuation">:</span><span class="token number">95588</span><span class="token punctuation">,</span><span class="token string">'BOC'</span><span class="token punctuation">:</span><span class="token number">955666</span><span class="token punctuation">}</span>d<span class="token punctuation">[</span><span class="token string">'BOC'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 955666</span></code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><blockquote><p>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p></blockquote><h4 id="建立列表"><a href="#建立列表" class="headerlink" title="建立列表"></a>建立列表</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 1.建立列表</span>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'oragne'</span><span class="token punctuation">,</span><span class="token string">'banana'</span><span class="token punctuation">]</span>a <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等差数列 [1, 3, 5, 7, 9]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">**</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 等比数列 [1, 2, 4, 8, 16]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token operator">+</span>j <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 二维列表 [[0, 1, 2], [1, 2, 3]]</span></code></pre><h4 id="访问列表"><a href="#访问列表" class="headerlink" title="访问列表"></a>访问列表</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 2.访问列表</span><span class="token comment" spellcheck="true"># 列表支持下标访问和切片访问</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#[1, 3, 5, 7, 9]</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 1</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 9</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 7</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># [1, 3, 5]</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># [1, 5]</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># [1, 3, 5, 7, 9]</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># [1, 3, 5]</span></code></pre><h4 id="修改列表"><a href="#修改列表" class="headerlink" title="修改列表"></a>修改列表</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 3.修改列表</span>a <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 3, 5, 7, 9]</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># [0, 3, 5, 7, 9]</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 删除元素 [3, 5, 7, 9]</span><span class="token keyword">del</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 根据下标删除元素 [5, 7, 9]</span></code></pre><pre class=" language-python"><code class="language-python">a <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># + 对序列有拼接作用</span><span class="token comment" spellcheck="true">#[5, 7, 9, 1, 2, 3]</span></code></pre><pre class=" language-python"><code class="language-python">a <span class="token operator">*</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># * 有复制拷贝多份的效果</span><span class="token comment" spellcheck="true"># [5, 7, 9, 5, 7, 9, 5, 7, 9]</span></code></pre><h4 id="列表常用函数"><a href="#列表常用函数" class="headerlink" title="列表常用函数"></a>列表常用函数</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 4.列表常用函数</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span>max<span class="token punctuation">(</span>a<span class="token punctuation">)</span>min<span class="token punctuation">(</span>a<span class="token punctuation">)</span>sorted<span class="token punctuation">(</span>a<span class="token punctuation">,</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h4 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 5.列表常用方法</span>a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [5, 7, 9, 8, 10]</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [5, 7, 9, 8, 10, 11]</span>a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 5, 7, 9, 8, 10, 11]</span></code></pre><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><blockquote><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p></blockquote><p>字典在插入元素和查找元素方面很多时候比列表更加高效</p><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 1.创建字典</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">}</span>a <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> dict<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>D <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span>D <span class="token comment" spellcheck="true"># {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}</span></code></pre><h4 id="字典常用操作"><a href="#字典常用操作" class="headerlink" title="字典常用操作"></a>字典常用操作</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 2.字典常用操作</span>a<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># {'a': 3, 'b': 2}</span>a<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># {'a': 3, 'b': 2, 'c': 5}</span></code></pre><pre class=" language-python"><code class="language-python">a<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict_keys(['a', 'b', 'c'])</span></code></pre><pre class=" language-python"><code class="language-python">a<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict_values([3, 2, 5])</span></code></pre><pre class=" language-python"><code class="language-python">a<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict_items([('a', 3), ('b', 2), ('c', 5)])</span></code></pre><pre class=" language-python"><code class="language-python">a <span class="token comment" spellcheck="true"># {'a': 3, 'b': 2, 'c': 5}</span></code></pre><pre class=" language-python"><code class="language-python">a<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>a <span class="token comment" spellcheck="true"># {'a': 3, 'b': 3, 'c': 5, 'd': 10}</span></code></pre><pre class=" language-python"><code class="language-python">a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 当不存在对应 Key时,使用默认值而不是报错 0</span></code></pre><pre class=" language-python"><code class="language-python">a<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3 {'a': 3, 'b': 3, 'c': 5, 'd': 10}</span>a<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4 {'a': 3, 'b': 3, 'c': 5, 'd': 10, 'e': 4}</span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><blockquote><p>Python中的字符串用单引号 <strong>‘</strong> 或双引号 <strong>“</strong> 括起来，同时使用反斜杠 <strong>\</strong> 转义特殊字符。</p></blockquote><h4 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 1.创建字符串</span>s1 <span class="token operator">=</span> <span class="token string">'I\'m Percy.\nI just use Python to say :"hello world"!'</span> <span class="token comment" spellcheck="true"># 单引号创建</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></code></pre><pre><code>I&#39;m Percy.I just use Python to say :&quot;hello world&quot;!</code></pre><pre class=" language-python"><code class="language-python">s2 <span class="token operator">=</span> <span class="token string">"I'm Percy.\nI just use Python to say:\"hello world\"!"</span> <span class="token comment" spellcheck="true"># 双引号创建</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span></code></pre><pre><code>I&#39;m Percy.I just use Python to say:&quot;hello world&quot;!</code></pre><pre class=" language-python"><code class="language-python">s3 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''I'm Percy.I just use Python to say:"hello world"!'''</span> <span class="token comment" spellcheck="true"># 三重引号创建</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span></code></pre><pre><code>I&#39;m Percy.I just use Python to say:&quot;hello world&quot;!</code></pre><pre class=" language-python"><code class="language-python">str<span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将数字转为字符串 '12345'</span></code></pre><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 2.字符串拼接(+ , join)</span>s1 <span class="token operator">=</span> <span class="token string">"I'm Percy."</span>s2 <span class="token operator">=</span> <span class="token string">"I love Python."</span>s3 <span class="token operator">=</span> <span class="token string">'I just use Python to say:"hello world"!'</span>s <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> s3<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><pre><code>I&#39;m Percy.I love Python.I just use Python to say:&quot;hello world&quot;!</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>s3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>I'm Percy<span class="token punctuation">.</span>I love Python<span class="token punctuation">.</span>I just use Python to say<span class="token punctuation">:</span><span class="token string">"hello world"</span>!</code></pre><pre class=" language-python"><code class="language-python"><span class="token string">"abc"</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># 'abcabcabcabcabc'</span></code></pre><h4 id="清洗字符串"><a href="#清洗字符串" class="headerlink" title="清洗字符串"></a>清洗字符串</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 3.清洗字符串(replace,strip)</span><span class="token string">"$$$abcdef$$xyz"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 'abcdefxyz'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token string">"\nabc123\t"</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 'abc123'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token string">"Percy\t18\tmale"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['Percy', '18', 'male']</span></code></pre><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 4.格式化字符串(% 或 format)</span>age <span class="token operator">=</span> <span class="token number">19</span>weight <span class="token operator">=</span> <span class="token number">60.5</span>hobby <span class="token operator">=</span> <span class="token string">'travelling'</span><span class="token comment" spellcheck="true"># %d表示整数, %f表示浮点数, %s表示字符串</span>fs <span class="token operator">=</span> <span class="token string">"I'm %d years old. My weight is %.2f kg. I like %s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>weight<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># I'm 19 years old. My weight is 60.50 kg. I like travelling</span></code></pre><pre class=" language-python"><code class="language-python">fs <span class="token operator">=</span> <span class="token string">"I'm {} years old. My weight is {:.2f} kg. I like {}"</span> <span class="token punctuation">.</span>format<span class="token punctuation">(</span>age<span class="token punctuation">,</span>weight<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># I'm 19 years old. My weight is 60.50 kg. I like travelling</span></code></pre><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><blockquote><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 <strong>()</strong> 里，元素之间用逗号隔开。<strong>元组中的元素类型也可以不相同。</strong></p></blockquote><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.创建元组</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>t0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ()</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (1,)</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token comment" spellcheck="true"># (1, 2)</span>y <span class="token operator">=</span> tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (1, 2, 3)</span>z <span class="token operator">=</span> tuple<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ('a', 'b', 'c')</span></code></pre><h4 id="使用元组"><a href="#使用元组" class="headerlink" title="使用元组"></a>使用元组</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2.使用元组</span>t<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 序列解包</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 元组可以作为字典的 key</span><span class="token comment" spellcheck="true"># d = {[1,2]:4} # TypeError: unhashable type: 'list'</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># {(1, 2): 4}</span></code></pre><h4 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 3.浅拷贝与深拷贝</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> l <span class="token comment" spellcheck="true">#浅拷贝,指向同一个内存空间(只是原来对象的一个别名)</span>l2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># l2 [0, 2, 3]</span><span class="token comment" spellcheck="true"># l [0, 2, 3]</span></code></pre><pre class=" language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>l3 <span class="token operator">=</span> l<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#深拷贝,开辟新的内存空间</span><span class="token comment" spellcheck="true"># [1, 2, 3]</span>l3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># l3 [0, 2, 3]</span><span class="token comment" spellcheck="true"># l [1, 2, 3]</span></code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p></blockquote><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.创建集合</span>s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>type<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict</span>s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>type<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># set</span>s3 <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># {0, 1, 4}</span></code></pre><h4 id="使用集合"><a href="#使用集合" class="headerlink" title="使用集合"></a>使用集合</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2.使用集合</span><span class="token comment" spellcheck="true"># 去除重复对象,求交集、并集、补集等操作</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础语法(下)</title>
      <link href="/2019/08/04/python3-ji-chu-yu-fa-xia/"/>
      <url>/2019/08/04/python3-ji-chu-yu-fa-xia/</url>
      
        <content type="html"><![CDATA[<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><h4 id="input-输入"><a href="#input-输入" class="headerlink" title="input 输入"></a>input 输入</h4><blockquote><p>使用 input，执行程序后程序会等待用户输入</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># input 输入的都是字符串</span>weight <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"please input your weight:"</span><span class="token punctuation">)</span>weight</code></pre><p>please input your weight:62.5</p><p>‘62.5’</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 利用float函数将字符串转化成浮点数</span>weight <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"please input your weight:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>weight</code></pre><p>please input your weight:62.5</p><p>62.5</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 利用eval函数将输入的字符串作为表达式进行计算</span>age <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"please input your age:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>age</code></pre><p>please input your age:2018-1999</p><p>19</p><h4 id="print-输出"><a href="#print-输出" class="headerlink" title="print 输出"></a>print 输出</h4><blockquote><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong>end=””</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 输出用print</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'your weight is:'</span><span class="token punctuation">,</span>weight<span class="token punctuation">)</span></code></pre><p>your weight is: 62.5</p><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><blockquote><p>在 Python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</p></blockquote><ul><li>将整个模块导入</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 以普通方式导入</span><span class="token keyword">import</span> datetimedatetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>datetime.datetime(2019, 8, 4, 8, 47, 32, 247842)</p><ul><li>从某个模块中导入某个函数</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 导入模块中某个对象</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimedatetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>datetime.datetime(2019, 8, 4, 8, 48, 52, 171114)</p><ul><li>将某个模块中的全部函数导入</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 导入模块中全部对象</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> <span class="token operator">*</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>datetime.date(2018, 1, 1)</p><ul><li>将整个模块导入并为该模块起个别名</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 以简写方式导入模块</span><span class="token keyword">import</span> datetime <span class="token keyword">as</span> dtdt<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>datetime.datetime(2019, 8, 4, 8, 50, 59, 799972)</p><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">加 - 两个对象相加</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">减 - 得到负数或是一个数减去另一个数</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">除 - x 除以 y</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">取模 - 返回除法的余数</td></tr><tr><td style="text-align:left">**</td><td style="text-align:left">幂 - 返回x的y次幂</td></tr><tr><td style="text-align:left">//</td><td style="text-align:left">取整除 - 向下取接近除数的整数</td></tr></tbody></table><h4 id="基本数学运算"><a href="#基本数学运算" class="headerlink" title="基本数学运算"></a>基本数学运算</h4><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">2</span> <span class="token comment" spellcheck="true">#四则运算</span>Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">31</span></code></pre><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">10</span> <span class="token comment" spellcheck="true">#乘方运算</span>Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1024</span></code></pre><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token operator">%</span><span class="token number">5</span> <span class="token comment" spellcheck="true">#求余运算</span>Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token operator">//</span><span class="token number">5</span> <span class="token comment" spellcheck="true">#地板除法</span>Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre><h4 id="Math-模块中的函数"><a href="#Math-模块中的函数" class="headerlink" title="Math 模块中的函数"></a>Math 模块中的函数</h4><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> mathIn <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>pi<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#三角函数</span>Out<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.0</span></code></pre><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#绝对值</span>Out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#对数函数</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.0</span></code></pre><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#阶乘</span>Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">120</span></code></pre><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2j</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1j</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#复数</span>Out<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> complex<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1j</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">0.6</span><span class="token operator">+</span><span class="token number">0.8j</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础语法（上）</title>
      <link href="/2019/08/02/python3-ji-chu-yu-fa-shang/"/>
      <url>/2019/08/02/python3-ji-chu-yu-fa-shang/</url>
      
        <content type="html"><![CDATA[<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h4 id="什么是标识符"><a href="#什么是标识符" class="headerlink" title="什么是标识符"></a>什么是标识符</h4><blockquote><p><em>标识符（identifier）</em>是指<strong>用来标识某个实体的一个符号</strong>，在不同的应用环境下有不同的含义。在计算机编程语言中，标识符是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系。</p></blockquote><h4 id="标识符规则"><a href="#标识符规则" class="headerlink" title="标识符规则"></a>标识符规则</h4><p>标识符由字母、数字、下划线组成。</p><p>所有标识符可以包括英文、数字以及下划线（_），但不能以数字开头。</p><p>标识符对大小写敏感。</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hello_110 <span class="token operator">=</span> <span class="token number">0</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> _110hello <span class="token operator">=</span> <span class="token number">0</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 110_hello <span class="token operator">=</span> <span class="token number">0</span>  File <span class="token string">"&lt;ipython-input-7-98d382705aaa>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>    110_hello <span class="token operator">=</span> <span class="token number">0</span>       <span class="token operator">^</span>SyntaxError<span class="token punctuation">:</span> invalid token</code></pre><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><h4 id="什么是保留字"><a href="#什么是保留字" class="headerlink" title="什么是保留字"></a>什么是保留字</h4><blockquote><p><em>保留字(reserved word)</em>，指在高级语言中已经定义过的字，使用者不能再将这些字作为变量名或过程名使用。</p></blockquote><p><strong>保留字就是关键字。</strong></p><h4 id="如何查看关键字"><a href="#如何查看关键字" class="headerlink" title="如何查看关键字"></a>如何查看关键字</h4><blockquote><p>Python中有一个模块叫keyword，keyword中有两个成员：iskeyword 函数和 kwlist 列表（<strong>all</strong> = [“iskeyword”, “kwlist”]）。</p><p>其中kwlist中包含了所有的关键字，而iskeyword则用来查看某一个字符串是否是关键字。</p></blockquote><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> keyword   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> keyword<span class="token punctuation">.</span>kwlistOut<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'False'</span><span class="token punctuation">,</span><span class="token string">'None'</span><span class="token punctuation">,</span><span class="token string">'True'</span><span class="token punctuation">,</span><span class="token string">'and'</span><span class="token punctuation">,</span><span class="token string">'as'</span><span class="token punctuation">,</span><span class="token string">'assert'</span><span class="token punctuation">,</span><span class="token string">'async'</span><span class="token punctuation">,</span><span class="token string">'await'</span><span class="token punctuation">,</span><span class="token string">'break'</span><span class="token punctuation">,</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'continue'</span><span class="token punctuation">,</span><span class="token string">'def'</span><span class="token punctuation">,</span><span class="token string">'del'</span><span class="token punctuation">,</span><span class="token string">'elif'</span><span class="token punctuation">,</span><span class="token string">'else'</span><span class="token punctuation">,</span><span class="token string">'except'</span><span class="token punctuation">,</span><span class="token string">'finally'</span><span class="token punctuation">,</span><span class="token string">'for'</span><span class="token punctuation">,</span><span class="token string">'from'</span><span class="token punctuation">,</span><span class="token string">'global'</span><span class="token punctuation">,</span><span class="token string">'if'</span><span class="token punctuation">,</span><span class="token string">'import'</span><span class="token punctuation">,</span><span class="token string">'in'</span><span class="token punctuation">,</span><span class="token string">'is'</span><span class="token punctuation">,</span><span class="token string">'lambda'</span><span class="token punctuation">,</span><span class="token string">'nonlocal'</span><span class="token punctuation">,</span><span class="token string">'not'</span><span class="token punctuation">,</span><span class="token string">'or'</span><span class="token punctuation">,</span><span class="token string">'pass'</span><span class="token punctuation">,</span><span class="token string">'raise'</span><span class="token punctuation">,</span><span class="token string">'return'</span><span class="token punctuation">,</span><span class="token string">'try'</span><span class="token punctuation">,</span><span class="token string">'while'</span><span class="token punctuation">,</span><span class="token string">'with'</span><span class="token punctuation">,</span><span class="token string">'yield'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> keyword<span class="token punctuation">.</span>iskeyword<span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">False</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> keyword<span class="token punctuation">.</span>iskeyword<span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean">True</span></code></pre><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><blockquote><p>Python 最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 来控制类，函数以及其他逻辑判断。缩进的空格数是可变的，但是<strong>同一个代码块的语句必须包含相同的缩进空格数。</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#正常        </span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#IndentationError: unindent does not match any outer indentation level</span></code></pre><p><code>IndentationError: unindent does not match any outer indentation level</code>错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#IndentationError: unexpected indent</span></code></pre><p><code>IndentationError: unexpected indent</code>错误, 则 Python 编译器是在告诉你你的文件里格式不对了，可能是tab和空格没对齐的问题，所有 Python 对格式要求非常严格。</p><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句。</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> \   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">+</span> \   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token number">3</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> numberOut<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">6</span></code></pre><p>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> days <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span>        <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> daysOut<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span></code></pre><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><blockquote><p>Python 可以使用引号( <strong>‘</strong> )、双引号( <strong>“</strong> )、三引号( <strong>‘’’</strong> 或 <strong>“””</strong> ) 来表示字符串，引号的开始与结束必须的相同类型的。其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。</p></blockquote><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> string1 <span class="token operator">=</span> <span class="token string">'hello'</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> string2 <span class="token operator">=</span> <span class="token string">"world"</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> string3 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""helloworld"""</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> string4 <span class="token operator">=</span> 'hello"  File <span class="token string">"&lt;ipython-input-50-490b69049501>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>    string4 <span class="token operator">=</span> 'hello"                     <span class="token operator">^</span>SyntaxError<span class="token punctuation">:</span> EOL <span class="token keyword">while</span> scanning string literal</code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>Python 中单行注释采用 # 开头。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#这是第一个注释</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#这是第二个注释</span><span class="token triple-quoted-string string">'''这是多行注释，使用单引号。这是多行注释，使用单引号。这是多行注释，使用单引号。'''</span><span class="token triple-quoted-string string">"""这是多行注释，使用双引号。这是多行注释，使用双引号。这是多行注释，使用双引号。"""</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
